{"version":3,"file":"main.5ea25ac8.iframe.bundle.js","mappings":";AAcA;AACA;;;AAGA;ACbA;;AAEA;;;AAGA;;;AAGA;ACRA;AACA;ACDA;AACA;;;AAGA;ACJA;AACA;;;AAGA;ACJA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA","sources":["webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildBaseQuery.js","webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildCreateMutation.js","webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildDeleteMutation.js","webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildReadOneQuery.js","webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildReadQuery.js","webpack://silverstripe-admin/./client/src/lib/dependency-injection/graphql/buildUpdateMutation.js"],"sourcesContent":["import { defaultTag } from './tags';\nimport { getVariables, getParams, getFields, getFragments } from './helpers';\n\nconst getOperationName = ({ operationName, queryName }) => (\n  operationName ||\n  `${queryName.charAt(0).toUpperCase()}${queryName.slice(1)}`\n);\n\nconst getQueryName = ({ queryName }) => queryName;\n\nconst getQueryType = ({ queryType }) => queryType;\n\nconst buildReadQuery = (tag = defaultTag) => (\n  tag`${getQueryType} ${getOperationName}${getVariables} {\n    ${getQueryName}(${getParams}) {\n      ${getFields}\n    }\n  }\n  ${getFragments}`\n);\n\nexport default buildReadQuery;\n","import { defaultTag } from './tags';\nimport { getSingularName, getCreateMutationType, getFields, getFragments } from './helpers';\n\nconst buildCreateMutation = (tag = defaultTag) => (\n  tag`mutation Create${getSingularName}(\n    $input:${getCreateMutationType}!\n  ) {\n    create${getSingularName}(\n      input: $input\n    ) {\n      ${getFields}\n    }\n  }\n  ${getFragments}`\n);\n\nexport default buildCreateMutation;\n","import { defaultTag } from './tags';\nimport { getSingularName } from './helpers';\n\nconst buildDeleteMutation = (tag = defaultTag) => (\n  tag`mutation Delete${getSingularName}($IDs:[ID]!) {\n    delete${getSingularName}(IDs: $IDs)\n  }`\n);\n\nexport default buildDeleteMutation;\n","import { defaultTag } from './tags';\nimport { getSingularName, getFields, getFragments } from './helpers';\n\nconst buildReadOneQuery = (tag = defaultTag) => (\n  tag`query ReadOne${getSingularName}($ID: ID!)  {\n    readOne${getSingularName}(ID: $ID) {\n      ${getFields}\n    }\n  }\n  ${getFragments}`\n);\n\nexport default buildReadOneQuery;\n","import { defaultTag } from './tags';\nimport { getPluralName, getVariables, getRootParams, getFields, getFragments } from './helpers';\n\nconst buildReadQuery = (tag = defaultTag) => (\n  tag`query Read${getPluralName}${getVariables} {\n    read${getPluralName}${getRootParams} {\n      ${getFields}\n    }\n  }\n  ${getFragments}`\n);\n\nexport default buildReadQuery;\n","import { defaultTag } from './tags';\nimport { getSingularName, getUpdateMutationType, getVariables, getParams, getFields, getFragments } from './helpers';\n\nconst buildUpdateMutation = (tag = defaultTag) => (\n  tag`mutation Update${getSingularName}(\n    $input:${getUpdateMutationType}!\n    ${getVariables}\n  ) {\n    update${getSingularName}(\n      input: $input\n      ${getParams}\n    ) {\n      ${getFields}\n    }\n  }\n  ${getFragments}`\n);\n\nexport default buildUpdateMutation;\n"],"names":[],"sourceRoot":""}